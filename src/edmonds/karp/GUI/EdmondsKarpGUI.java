/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edmonds.karp.GUI;

import edmonds.karp.Controller.EdmondsKarpController;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;


/**
 *
 * @author gabriele
 */
public class EdmondsKarpGUI extends javax.swing.JFrame {

    private final ArrayList<Circle> circles;
    private int MODE = 0;
    private int name;
    private boolean isSecond;
    private boolean isInDragging;
    private Circle shapeTmp;
    private final int DRAW = 0;
    private final int ERASE = 3;
    private Graphics2D graphics;
    private BufferedImage bf;
    private EdmondsKarpController controller;

    private EdmondsKarpGUI() {
        initComponents();
        circles = new ArrayList<>();
        bf = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_ARGB);
        graphics = bf.createGraphics();
        graphics.setBackground(Color.WHITE);
        graphics.setFont(new Font("Ubuntu", Font.HANGING_BASELINE, 15));
        graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        controller = new EdmondsKarpController(this);
        name = 0;
        isSecond = false;
        isInDragging = false;
    }

    public EdmondsKarpGUI getGUI() {
        return this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        pencilButton = new javax.swing.JToggleButton();
        rubberButton = new javax.swing.JToggleButton();
        playButton = new javax.swing.JToggleButton();
        pauseButton = new javax.swing.JToggleButton();
        backButton = new javax.swing.JButton();
        forwardButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        jPopupMenu1.setLightWeightPopupEnabled(false);
        jPopupMenu1.setOpaque(false);
        jPopupMenu1.setRequestFocusEnabled(false);

        jMenuItem2.setText("jMenuItem2");
        jPopupMenu1.add(jMenuItem2);

        jMenuItem3.setText("jMenuItem3");
        jPopupMenu1.add(jMenuItem3);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setMaximumSize(new java.awt.Dimension(1920, 1080));
        jPanel2.setPreferredSize(new java.awt.Dimension(800, 600));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel2MouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel2MouseDragged(evt);
            }
        });
        jPanel2.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel2AncestorResized(evt);
            }
        });
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setBackground(new java.awt.Color(169, 169, 169));
        jPanel1.setPreferredSize(new java.awt.Dimension(824, 50));

        pencilButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edmonds/karp/GUI/draw.png"))); // NOI18N
        pencilButton.setSelected(true);
        pencilButton.setToolTipText("draw");
        pencilButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pencilButton.setMaximumSize(new java.awt.Dimension(30, 30));
        pencilButton.setMinimumSize(new java.awt.Dimension(24, 24));
        pencilButton.setName(""); // NOI18N
        pencilButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pencilButtonActionPerformed(evt);
            }
        });

        rubberButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edmonds/karp/GUI/remove.png"))); // NOI18N
        rubberButton.setToolTipText("erase");
        rubberButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rubberButton.setMaximumSize(new java.awt.Dimension(30, 30));
        rubberButton.setMinimumSize(new java.awt.Dimension(24, 24));
        rubberButton.setName(""); // NOI18N
        rubberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rubberButtonActionPerformed(evt);
            }
        });

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edmonds/karp/GUI/play.png"))); // NOI18N
        playButton.setToolTipText("play");
        playButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playButton.setMaximumSize(new java.awt.Dimension(30, 30));
        playButton.setMinimumSize(new java.awt.Dimension(24, 24));
        playButton.setName(""); // NOI18N
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edmonds/karp/GUI/bars.png"))); // NOI18N
        pauseButton.setToolTipText("pause");
        pauseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pauseButton.setMaximumSize(new java.awt.Dimension(30, 30));
        pauseButton.setMinimumSize(new java.awt.Dimension(24, 24));
        pauseButton.setName(""); // NOI18N
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edmonds/karp/GUI/back.png"))); // NOI18N

        forwardButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edmonds/karp/GUI/forward.png"))); // NOI18N

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edmonds/karp/GUI/square.png"))); // NOI18N
        stopButton.setToolTipText("stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pencilButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rubberButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(forwardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(535, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stopButton)
                    .addComponent(forwardButton)
                    .addComponent(backButton)
                    .addComponent(pauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rubberButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pencilButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(628, 628, 628))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {

            if (MODE == ERASE) {
                eraseShape(evt.getPoint());
            } else if (MODE == DRAW) {

                if (isSecond) {
                    Circle circ = getSelectedCircle(evt.getPoint());
                    if (circ != null && circ != shapeTmp) {
                        addArrow(circ);
                        shapeTmp.setSelect(false);
                        isSecond = false;
                        update();
                        return;
                    }
                } else {
                    Circle circ = getSelectedCircle(evt.getPoint());
                    if (circ != null) {
                        shapeTmp = circ;
                        shapeTmp.setSelect(true);
                        isSecond = true;
                        update();
                        return;
                    }

                }

                if (getSelectedCircle(evt.getPoint()) == null) {
                    addCircle(evt.getPoint());
                }
            }
        } else if (evt.getButton() == MouseEvent.BUTTON3) {
           jPopupMenu1.show(this, evt.getX(), evt.getY());
           //System.out.println("start");
            //update();
        }
    }//GEN-LAST:event_jPanel2MouseClicked

    private void jPanel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseDragged
        if (!isInDragging) {
            
            if (shapeTmp != null) {
                shapeTmp.setSelect(false);
                isSecond = false;
            }
            
            shapeTmp = getSelectedCircle(evt.getPoint());
            if (shapeTmp != null) {
                shapeTmp.setFirstPoint(evt.getPoint());
                shapeTmp.needUpdate();
                isInDragging = true;
            } else {
                addCircle(evt.getPoint());
                isInDragging = false;
                shapeTmp = null;
            }

        } else {
            shapeTmp.setFirstPoint(evt.getPoint());
            shapeTmp.needUpdate();
            shapeTmp.updateArrow();
        }
        update();
        
    }//GEN-LAST:event_jPanel2MouseDragged

    private void jPanel2AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel2AncestorResized
        if (graphics != null && (jPanel2.getWidth() != this.getWidth() || jPanel2.getHeight() != this.getHeight())) {
            bf = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_ARGB);
            graphics = bf.createGraphics();
            graphics.setBackground(Color.WHITE);
            graphics.setFont(new Font("Ubuntu", Font.HANGING_BASELINE, 15));
            graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            update();
        }
    }//GEN-LAST:event_jPanel2AncestorResized

    private void jPanel2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseReleased
        isInDragging = false;
    }//GEN-LAST:event_jPanel2MouseReleased

    private void pencilButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pencilButtonActionPerformed
        // TODO add your handling code here:
        rubberButton.setSelected(false);
        MODE = DRAW;
    }//GEN-LAST:event_pencilButtonActionPerformed

    private void rubberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rubberButtonActionPerformed
        // TODO add your handling code here:
        pencilButton.setSelected(false);
        MODE = ERASE;
    }//GEN-LAST:event_rubberButtonActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        // TODO add your handling code here:
        pauseButton.setSelected(false);

    }//GEN-LAST:event_playButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        // TODO add your handling code here:
        playButton.setSelected(false);
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // TODO add your handling code here:
        playButton.setSelected(false);
        pauseButton.setSelected(false);
    }//GEN-LAST:event_stopButtonActionPerformed

    private void eraseShape(Point2D point) {
        for (Circle circle : circles) {
            if (circle.getShape().contains(point)) {
                circles.remove(circle);
                circle.removeArrows();
                break;
            } else {
                Arrow arrow = circle.checkForArrow(point);
                if (arrow != null) {
                    arrow.getFrom().removeArrowFrom(arrow);
                    arrow.getTo().removeArrowTo(arrow);
                }
            }
        }
        update();
    }

    private void drawShape(MyShape shape) {
        shape.draw(graphics);
        shape.drawText(graphics);
        jPanel2.getGraphics().drawImage(bf, 0, 0, this.getWidth(), this.getHeight(), null);
    }

    private Circle getSelectedCircle(Point point) {
        for (Circle circle : circles) {
            if (circle.getShape().contains(point)) {
                return circle;
            }
        }

        return null;
    }

    public void update() {
        graphics.clearRect(0, 0, this.getWidth(), this.getHeight());
        for (Circle circle : circles) {
            circle.draw(graphics);
            circle.drawText(graphics);
            circle.updateArrow();
            circle.drawArrows(graphics);
        }
        jPanel2.getGraphics().drawImage(bf, 0, 0, this.getWidth(), this.getHeight(), null);
    }

    private void addCircle(Point point) {
        Circle circle = new Circle();
        circles.add(circle);
        circle.setFirstPoint(point);
        circle.setColor(Color.black);
        circle.setName("" + circles.size()); //TODO 
        controller.addNode(circle);
        drawShape(circle);
    }

    private void addArrow(Circle circ) {
        Arrow arrow = new Arrow(shapeTmp, circ);
        shapeTmp.addArrowFrom(arrow);
        circ.addArrowTo(arrow);
        controller.addEdge(arrow);
        drawShape(arrow);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EdmondsKarpGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EdmondsKarpGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EdmondsKarpGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EdmondsKarpGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EdmondsKarpGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton forwardButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JToggleButton pauseButton;
    private javax.swing.JToggleButton pencilButton;
    private javax.swing.JToggleButton playButton;
    private javax.swing.JToggleButton rubberButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
